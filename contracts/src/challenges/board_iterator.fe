pub struct BoardIterator {
    has_next: bool
    current_row: u8
    current_column: u8

    pub fn new() -> BoardIterator {
        return BoardIterator (has_next: true, current_row: 0, current_column: 0)
    }

    pub fn has_next(self) -> bool {
        return self.has_next
    }

    // Returns (row_idx, column_idx) or reverts if `has_next` is `false`
    pub fn next(mut self) -> (u8, u8) {
        if self.has_next == false {
            revert
        }

        let current_position: (u8, u8) = (self.current_row, self.current_column)

        if self.current_column == 3 {
            self.current_row += 1
            self.current_column = 0
        } else {
            self.current_column += 1
        }

        if self.current_row == 4 {
            self.has_next = false
        }

        return current_position
    }
}